{"version":3,"sources":["components/Footer/Footer.module.css","components/FavoriteCityButton/FavoriteCityButton.module.css","components/HourlyCardWrapper/HourlyCardWrapper.module.css","components/ErrorPage/ErrorPage.module.css","components/Line/Line.module.css","components/Loader/Loader.module.css","components/DetailsPage/DetailsPage.module.css","components/CardWrapper/CardWrapper.module.css","components/MainSearchResultPage/MainSearchResultPage.module.css","components/MainPage/MainPage.module.css","components/WeatherCard/WeatherCard.module.css","components/HourlyWeatherCard/HourlyWeatherCard.module.css","components/Line/Line.jsx","store/selectors/selectors.js","components/WeatherCard/WeatherCard.jsx","store/getForecast/getForecastActions.js","components/Loader/Loader.jsx","components/CardWrapper/CardWrapper.jsx","store/setCity/setCityActions.js","components/DetailsPage/DetailsPage.jsx","components/Footer/Footer.jsx","components/FavoriteCityButton/FavoriteCityButton.jsx","components/Header/Header.jsx","components/HourlyWeatherCard/HourlyWeatherCard.jsx","store/getHourlyForecast/getHourlyForecastActions.js","components/HourlyCardWrapper/HourlyCardWrapper.jsx","components/MainSearchResultPage/MainSearchResultPage.jsx","components/ErrorPage/ErrorPage.jsx","components/MainPage/MainPage.jsx","App.js","reportWebVitals.js","store/getForecast/getForecastReducer.js","store/setCity/setCityReducer.js","store/getHourlyForecast/getHourlyForecastReducer.js","store/setFavoriteCities/setFavoriteCitiesActions.js","store/setFavoriteCities/setFavoriteCitiesReducer.js","store/rootReducer.js","store/store.js","index.js","components/Header/Header.module.css"],"names":["module","exports","Line","props","className","styles","line","line_title","child","getForecastSelector","state","getForecast","forecast","forecastIsLoadingSelector","isLoading","getHourlyForecastSelector","getHourlyForecast","hourlyForecastIsLoadingSelector","cityTimezoneOffsetSelector","timezoneOffset","setCitySelector","setCity","city","TempItem","indicator_item","time","func","FeelsLikeTemp","feels_temp_item","getTemp","temp","Math","round","getCardDate","dt","date","Date","toUTCString","slice","getMonth","getDay","WeatherCard","cityTimezoneOffset","useSelector","cardDate","useMemo","src","weather","icon","Card","card","Body","body","head","Img","variant","img","Title","today","getUTCDate","indicator_wrapper","morn","day","eve","night","feels_temp","feels_like","indicator","indicator_wrapper_column","indicator_num","speed","humidity","pressure","length","length_item","alt","length_img","sunrise","getHours","getMinutes","sunset","forcastIsLoadingType","setForecastType","forecastIsLoading","bool","type","payload","setForecast","getForecastData","dispatch","a","fetch","then","result","json","list","Loader","loader_wrapper","lds_spinner","CardWrapper","useDispatch","useEffect","slicedForecast","card_wrapper","map","index","array","setCityType","DetailsPage","useParams","wrapper","Footer","icons","link","href","FavoriteCityButton","cityStore","activeClassName","btn_active","to","pathname","includes","btn","Header","push","useHistory","location","useLocation","useState","searchValue","setSearchValue","inFavorites","setInFavorits","favoriteCitiesArray","JSON","parse","localStorage","getItem","changedFavorites","setChangedFavorites","upperCaseCity","separator","split","word","toUpperCase","substring","join","cityName","search","useCallback","e","value","preventDefault","trim","addToFavoriteCities","cityIndex","indexOf","item","splice","removeItem","setItem","stringify","flex","links","active","logo","text","text_city","button","onClick","button_img","title","onSubmit","FormControl","placeholder","onChange","event","target","Button","id","buttons","HourlyWeatherCard","createSrc","getWindDirection","deg","month","wrapper_left","date_today","titles","titles_item","titles_empty","wrapper_right","slicedTime","time_item","values","values_column","values_icon","description","values_icon_img","width","height","values_item","wind","values_wind","setHourlyForecastType","hourlyForecastIsLoadingType","cityTimezoneOffsetType","hourlyForecastIsLoading","setHourlyForecast","HourlyCardWrapper","hourlyForecast","timezone","getHourlyForecastDate","weatherArray","data","daysArray","weatherDataFirstDay","forEach","dayObj","dt_txt","main","pop","createHourlyWeatherData","createDaysArray","shortForecast","wrapper_hourly","wrapper_daily","class","daily_card","MainSearchResultPage","ErrorPage","message","MainPage","App","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","getForecastReducer","action","setCityReducer","getHourlyForecastReducer","setFavoriteCitiesType","favoriteCities","setFavoriteCitiesReducer","rootReducer","combineReducers","setFavoriteCities","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById"],"mappings":"oGACAA,EAAOC,QAAU,CAAC,QAAU,wBAAwB,KAAO,uB,mBCA3DD,EAAOC,QAAU,CAAC,IAAM,gCAAgC,WAAa,yC,mBCArED,EAAOC,QAAU,CAAC,eAAiB,0CAA0C,cAAgB,yCAAyC,WAAa,wC,mBCAnJD,EAAOC,QAAU,CAAC,QAAU,2BAA2B,MAAQ,yBAAyB,QAAU,6B,mBCAlGD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,WAAa,2B,mBCAzDD,EAAOC,QAAU,CAAC,eAAiB,+BAA+B,YAAc,8B,mBCAhFD,EAAOC,QAAU,CAAC,QAAU,+B,mBCA5BD,EAAOC,QAAU,CAAC,aAAe,kCAAkC,kBAAoB,yC,mBCAvFD,EAAOC,QAAU,CAAC,QAAU,sCAAsC,IAAM,kCAAkC,IAAM,kCAAkC,WAAa,2C,mBCA/JD,EAAOC,QAAU,CAAC,QAAU,4B,uCCA5BD,EAAOC,QAAU,CAAC,KAAO,0BAA0B,KAAO,0BAA0B,IAAM,yBAAyB,KAAO,0BAA0B,kBAAoB,uCAAuC,eAAiB,oCAAoC,cAAgB,mCAAmC,WAAa,gCAAgC,gBAAkB,qCAAqC,KAAO,0BAA0B,OAAS,4BAA4B,YAAc,iCAAiC,WAAa,gCAAgC,yBAA2B,gD,uCCAxlBD,EAAOC,QAAU,CAAC,QAAU,mCAAmC,aAAe,wCAAwC,KAAO,gCAAgC,WAAa,sCAAsC,cAAgB,yCAAyC,KAAO,gCAAgC,UAAY,qCAAqC,QAAU,mCAAmC,aAAe,wCAAwC,YAAc,uCAAuC,OAAS,kCAAkC,cAAgB,yCAAyC,YAAc,uCAAuC,gBAAkB,2CAA2C,YAAc,uCAAuC,YAAc,uCAAuC,OAAS,oC,mMCSpzBC,EARF,SAACC,GACZ,OACE,qBAAKC,UAAWC,IAAOC,KAAvB,SACE,sBAAMF,UAAWC,IAAOE,WAAxB,SAAqCJ,EAAMK,W,OCLpCC,EAAsB,SAACC,GAAD,OAAWA,EAAMC,YAAYC,UACnDC,EAA4B,SAACH,GAAD,OAAWA,EAAMC,YAAYG,WACzDC,EAA4B,SAACL,GAAD,OACvCA,EAAMM,kBAAkBJ,UACbK,EAAkC,SAACP,GAAD,OAC7CA,EAAMM,kBAAkBF,WACbI,EAA6B,SAACR,GAAD,OACxCA,EAAMM,kBAAkBG,gBACbC,EAAkB,SAACV,GAAD,OAAWA,EAAMW,QAAQC,MCDlDC,EAAW,SAACpB,GAChB,OACE,sBAAKC,UAAWC,IAAOmB,eAAvB,UACE,8BAAMrB,EAAMsB,OACZ,8BAAMtB,EAAMuB,WAKZC,EAAgB,SAACxB,GACrB,OAAO,qBAAKC,UAAWC,IAAOuB,gBAAvB,SAAyCzB,EAAMuB,QAG3CG,EAAU,SAACC,GACtB,OAAOC,KAAKC,MAAMF,GAAQ,EAAnB,WAA2BC,KAAKC,MAAMF,IAAUC,KAAKC,MAAMF,IAGvDG,EAAc,SAACC,EAAIf,GAC9B,IAAMgB,EAAO,IAAIC,KAA6B,KAAvBF,EAAKf,IAqB5B,MAJc,UAAMgB,EAAKE,cAAcC,MAAM,EAAG,GAAlC,YAfA,CACZ,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,sBAIMH,EAAKI,YADC,aAhBK,CAAC,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,gBAkBxCJ,EAAKK,YAgHRC,EA3GK,SAACtC,GACnB,IAAMuC,EAAqBC,YAAYzB,GAEjCiB,EAAO,IAAIC,KAAuC,KAAjCjC,EAAM+B,GAAKQ,IAC5BE,EAAWC,mBACf,kBAAMZ,EAAY9B,EAAM+B,GAAIQ,KAC5B,CAACvC,EAAM+B,GAAIQ,IAGPI,EAAG,2CAAuC3C,EAAM4C,QAAQ,GAAGC,KAAxD,WAET,OACE,cAACC,EAAA,EAAD,CAAM7C,UAAWC,IAAO6C,KAAxB,SACE,eAACD,EAAA,EAAKE,KAAN,CAAW/C,UAAWC,IAAO+C,KAA7B,UACE,sBAAKhD,UAAWC,IAAOgD,KAAvB,UACE,cAACJ,EAAA,EAAKK,IAAN,CAAUC,QAAQ,MAAMT,IAAKA,EAAK1C,UAAWC,IAAOmD,MACpD,cAACP,EAAA,EAAKQ,MAAN,CAAYrD,UAAWC,IAAO8B,KAA9B,SACGhC,EAAMuD,OACPvB,EAAKwB,eACH,IAAIvB,KAA0C,KAApCjC,EAAMuD,MAAQhB,IAA4BiB,aAFrD,sDAGef,GACZA,OAGR,sBAAKxC,UAAWC,IAAOuD,kBAAvB,UACE,cAAC,EAAD,CAAUnC,KAAK,2BAAOC,KAAMG,EAAQ1B,EAAM2B,KAAK+B,QAC/C,cAAC,EAAD,CAAUpC,KAAK,2BAAOC,KAAMG,EAAQ1B,EAAM2B,KAAKgC,OAC/C,cAAC,EAAD,CAAUrC,KAAK,iCAAQC,KAAMG,EAAQ1B,EAAM2B,KAAKiC,OAChD,cAAC,EAAD,CAAUtC,KAAK,2BAAOC,KAAMG,EAAQ1B,EAAM2B,KAAKkC,YAGjD,cAAC,EAAD,CAAMxD,MAAM,8EACZ,sBAAKJ,UAAWC,IAAO4D,WAAvB,UACE,cAAC,EAAD,CAAevC,KAAMG,EAAQ1B,EAAM+D,WAAWL,QAC9C,cAAC,EAAD,CAAenC,KAAMG,EAAQ1B,EAAM+D,WAAWJ,OAC9C,cAAC,EAAD,CAAepC,KAAMG,EAAQ1B,EAAM+D,WAAWH,OAC9C,cAAC,EAAD,CAAerC,KAAMG,EAAQ1B,EAAM+D,WAAWF,YAGhD,oBAAI5D,UAAWC,IAAOC,OAEtB,qBAAKF,UAAWC,IAAO8D,UAAvB,SACE,sBACE/D,UAAS,UAAKC,IAAOuD,kBAAZ,YAAiCvD,IAAO+D,0BADnD,UAGE,sBAAKhE,UAAWC,IAAOmB,eAAvB,UACE,iEACA,sBAAKpB,UAAWC,IAAOgE,cAAvB,UACGtC,KAAKC,MAAM7B,EAAMmE,OADpB,uBAIF,sBAAKlE,UAAWC,IAAOmB,eAAvB,UACE,yFACA,sBAAKpB,UAAWC,IAAOgE,cAAvB,UACGtC,KAAKC,MAAM7B,EAAMoE,UADpB,WAIF,sBAAKnE,UAAWC,IAAOmB,eAAvB,UACE,mFACA,sBAAKpB,UAAWC,IAAOgE,cAAvB,UACGtC,KAAKC,MAAuB,iBAAjB7B,EAAMqE,UADpB,uDAON,oBAAIpE,UAAWC,IAAOC,OAEtB,sBAAKF,UAAWC,IAAOoE,OAAvB,UACE,sBAAKrE,UAAWC,IAAOqE,YAAvB,UACE,qBACE5B,IAAI,8DACJ6B,IAAI,UACJvE,UAAWC,IAAOuE,aAEpB,uEACA,gCACG,IAAIxC,KAAqB,IAAhBjC,EAAM0E,SAAgBC,WAAa,GAA5C,WACO,IAAI1C,KAAqB,IAAhBjC,EAAM0E,SAAgBC,YACnC,IAAI1C,KAAqB,IAAhBjC,EAAM0E,SAAgBC,WAHrC,IAKG,IAAI1C,KAAqB,IAAhBjC,EAAM0E,SAAgBE,aAAe,GAA9C,WACO,IAAI3C,KAAqB,IAAhBjC,EAAM0E,SAAgBE,cACnC,IAAI3C,KAAqB,IAAhBjC,EAAM0E,SAAgBE,mBAGvC,sBAAK3E,UAAWC,IAAOqE,YAAvB,UACE,qBACE5B,IAAI,6DACJ6B,IAAI,SACJvE,UAAWC,IAAOuE,aAEpB,iEACA,gCACG,IAAIxC,KAAoB,IAAfjC,EAAM6E,QAAeF,WADjC,IAEG,IAAI1C,KAAoB,IAAfjC,EAAM6E,QAAeD,aAAe,GAA7C,WACO,IAAI3C,KAAoB,IAAfjC,EAAM6E,QAAeD,cAClC,IAAI3C,KAAoB,IAAfjC,EAAM6E,QAAeD,4B,yBClJnCE,EAAuB,sBACvBC,EAAkB,eAGlBC,EAAoB,SAACC,GAAD,MAAW,CAC1CC,KAAMJ,EACNK,QAASF,IAGEG,EAAc,SAAC3E,GAAD,MAAe,CACxCyE,KAAMH,EACNI,QAAS1E,IAGE4E,EAAkB,SAAClE,GAAD,8CAAU,WAAOmE,GAAP,eAAAC,EAAA,6DACvCD,EAASN,GAAkB,IADY,SAEhBQ,MAAM,4DAAD,OACkCrE,EADlC,yBAdd,mCAcc,kBAE1BsE,MAAK,SAACC,GAAD,OAAYA,EAAOC,UAJa,OAEjClF,EAFiC,OAKvC6E,EAASF,EAAY3E,EAASmF,OAC9BN,EAASN,GAAkB,IANY,2CAAV,uD,iBCQhBa,EApBA,WACb,OACE,qBAAK5F,UAAWC,IAAO4F,eAAvB,SACE,sBAAK7F,UAAWC,IAAO6F,YAAvB,UACE,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,8BCoCOC,EAzCK,WAClB,IACMvF,EAAW+B,YAAYlC,GACvB0E,EAAoBxC,YAAY9B,GAChC4E,EAAWW,cAEX9E,EAAOqB,YAAYvB,GAEzBiF,qBAAU,WACRZ,EAASD,EAAgBlE,MACxB,CAACmE,EAAUnE,IAEd,IAAMgF,EAAiBzD,mBAAQ,WAC7B,OAAOjC,EAAS0B,MAAM,EAZH,MAalB,CAAC1B,EAbiB,KAerB,OAAOuE,EACL,cAAC,EAAD,IAEA,qBAAK/E,UAAWC,IAAOkG,aAAvB,SACGD,EAAeE,KAAI,SAAC1C,EAAK2C,EAAOC,GAC/B,OACE,cAAC,EAAD,CACEhD,MAAOgD,EAAM,GAAGxE,GAChBA,GAAI4B,EAAI5B,GACRgC,WAAYJ,EAAII,WAChBpC,KAAMgC,EAAIhC,KACV+C,QAASf,EAAIe,QACbG,OAAQlB,EAAIkB,OACZT,SAAUT,EAAIS,SACdD,MAAOR,EAAIQ,MACXE,SAAUV,EAAIU,SACdzB,QAASe,EAAIf,SACRe,EAAI5B,UC7CRyE,EAAc,WAEdtF,EAAU,SAACC,GAAD,MAAW,CAChC+D,KAAMsB,EACNrB,QAAShE,ICmBIsF,EAhBK,WAClB,IAAQtF,EAASuF,cAATvF,KAEFmE,EAAWW,cAIjB,OAFAC,qBAAU,kBAAMZ,EAASpE,EAAQC,MAAQ,CAACmE,EAAUnE,IAGlD,qBAAKlB,UAAWC,IAAOyG,QAAvB,SACE,qBAAK1G,UAAU,YAAf,SACE,cAAC,EAAD,S,iBCkCO2G,EAjDA,WACb,OACE,wBAAQ3G,UAAWC,IAAOyG,QAA1B,SACE,sBAAK1G,UAAU,YAAf,UACE,sBAAKA,UAAWC,IAAO2G,MAAvB,kDACU,IACR,mBAAG5G,UAAWC,IAAO4G,KAAMC,KAAK,mEAAhC,iEAFF,IAME,mBACE9G,UAAWC,IAAO4G,KAClBC,KAAK,sEAFP,iEANF,IAaE,mBACE9G,UAAWC,IAAO4G,KAClBC,KAAK,qGAFP,gGAMA,mBACE9G,UAAWC,IAAO4G,KAClBC,KAAK,4EAFP,iEAMA,mBACE9G,UAAWC,IAAO4G,KAClBC,KAAK,4EAFP,oEAOF,8BACE,mBACE9G,UAAWC,IAAO4G,KAClBC,KAAK,gDAFP,sC,6DCZKC,GAtBY,SAAChH,GAC1B,IAAMiH,EAAYzE,YAAYvB,GAE9B,OACE,cAAC,IAAD,CACEiG,gBAAiBhH,KAAOiH,WACxBC,GACEpH,EAAMqH,SAASC,SAAS,YAAxB,mBACgBtH,EAAMmB,MADtB,yBAEsBnB,EAAMmB,MAE9BlB,UACED,EAAMmB,OAAS8F,EAAf,UACO/G,KAAOqH,IADd,YACqBrH,KAAOiH,YACxBjH,KAAOqH,IAVf,SAaGvH,EAAMmB,QCiKEqG,GA9KA,WACb,IAAMlC,EAAWW,cACTwB,EAASC,cAATD,KACFE,EAAWC,cACXX,EAAYzE,YAAYvB,GAC9B,EAAsC4G,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAqCF,oBAAS,GAA9C,mBAAOG,EAAP,KAAoBC,EAApB,KACMC,EAAsBxF,mBAAQ,WAClC,OAAOyF,KAAKC,MAAMC,aAAaC,QAAQ,mBACnCH,KAAKC,MAAMC,aAAaC,QAAQ,mBAChC,KACH,IACH,EAAgDT,mBAASK,GAAzD,mBAAOK,EAAP,KAAyBC,EAAzB,KAEMC,EAAgB,SAACtH,EAAMuH,GAC3B,OAAOvH,EACJwH,MAAMD,GACNrC,KAAI,SAACuC,GAAD,OAAUA,EAAK,GAAGC,cAAgBD,EAAKE,UAAU,MACrDC,KAAKL,IAGJM,EAAWtG,mBAAQ,WACvB,OAAIuE,EAAUK,SAAS,KACdmB,EAAcxB,EAAW,KACvBA,EAAUK,SAAS,KACrBmB,EAAcxB,EAAW,KAEzBA,EAAU,GAAG4B,cAAgB5B,EAAU9E,MAAM,KAErD,CAAC8E,IAEEgC,EAASC,uBACb,SAACC,EAAGC,GACFD,EAAEE,iBACmB,KAAjBD,EAAME,QAIN3B,EAASN,SAASC,SAAS,YAC7BG,EAAK,YAAD,OAAa2B,IACRzB,EAASN,SAASC,SAAS,mBACpCG,EAAK,kBAAD,OAAmB2B,IAGzB9D,EAASpE,EAAQkI,IACjBrB,EAAe,KAVbA,EAAe,MAYnB,CAACzC,EAAUqC,EAAUF,IAGvB/E,mBAAQ,WACNwF,EAAoBZ,SAAS0B,GACzBf,GAAc,GACdA,GAAc,KACjB,CAACe,EAAUd,IAEd,IAAMqB,EAAsBL,uBAC1B,SAAC/H,GACC,GAAI+G,EAAoBZ,SAASnG,GAAO,CACtC8G,GAAc,GACd,IAAMuB,EAAYtB,EAAoBuB,QAAQtI,GAE9C+G,EAAoB7B,KAAI,SAACqD,EAAMpD,GAAP,OACtBkD,IAAclD,EAAQ4B,EAAoByB,OAAOrD,EAAO,GAAK,QAG/D+B,aAAauB,WAAW,kBACxBvB,aAAawB,QACX,iBACA1B,KAAK2B,UAAU5B,IAGjBM,EAAoBN,QACVA,EAAoBZ,SAASnG,KACvC8G,GAAc,GAEdC,EAAoBT,KAAKtG,GACzBkH,aAAawB,QACX,iBACA1B,KAAK2B,UAAU5B,IAEjBM,EAAoBN,MAGxB,CAACA,IAGH,OACE,wBAAQjI,UAAWC,KAAOyG,QAA1B,SACE,sBAAK1G,UAAU,YAAf,UACE,sBAAKA,UAAWC,KAAO6J,KAAvB,UACE,sBAAK9J,UAAWC,KAAO8J,MAAvB,UACE,cAAC,IAAD,CACE/J,UAAWC,KAAO4G,KAClBI,gBAAiBhH,KAAO+J,OACxB7C,GAAI,WAHN,SAKE,qBACEnH,UAAWC,KAAOgK,KAClBvH,IAAI,mDACJ6B,IAAI,WAGR,cAAC,IAAD,CACEvE,UAAWC,KAAO4G,KAClBI,gBAAiBhH,KAAO+J,OACxB7C,GAAE,mBAAcH,GAHlB,wDAOA,cAAC,IAAD,CACEhH,UAAWC,KAAO4G,KAClBI,gBAAiBhH,KAAO+J,OACxB7C,GAAE,yBAAoBH,GAHxB,iGAOA,sBAAKhH,UAAWC,KAAOiK,KAAvB,UACE,mBAAGlK,UAAWC,KAAOkK,UAArB,SAAiCpB,IACjC,wBACE/I,UAAWC,KAAOmK,OAClBC,QAAS,kBAAMf,EAAoBP,IAFrC,SAIE,qBACE/I,UAAWC,KAAOqK,WAClB/F,IAAI,iHACJgG,MAAM,iHACN7H,IACEqF,EACI,oDACA,kFAMd,uBACE/H,UAAS,eAAUC,KAAO+I,QAC1BwB,SAAU,SAACtB,GAAD,OAAOF,EAAOE,EAAGrB,IAF7B,UAIE,cAAC4C,EAAA,EAAD,CACEC,YAAY,4EACZ,aAAW,OACX,mBAAiB,eACjBvB,MAAOtB,EACP5C,KAAK,SACL0F,SAAU,SAACC,GAAD,OAAW9C,EAAe8C,EAAMC,OAAO1B,UAGnD,cAAC2B,EAAA,EAAD,CACE3H,QAAQ,oBACR4H,GAAG,gBACH9F,KAAK,SAHP,wDASJ,qBAAKjF,UAAWC,KAAO+K,QAAvB,SACG1C,EAAiBlC,KAAI,SAACqD,GACrB,OACE,cAAC,GAAD,CAEErC,SAAUM,EAASN,SACnBlG,KAAMuI,GAFDA,c,2DCzCNwB,GA3HW,SAAClL,GACzB,IAAMuC,EAAqBC,YAAYzB,GAGjC0B,GADO,IAAIR,KAA8C,KAAxCjC,EAAM2D,IAAI,GAAG5B,GAAKQ,IACxBG,mBACf,kBAAMZ,EAAY9B,EAAM2D,IAAI,GAAG5B,GAAIQ,KACnC,CAACvC,EAAM2D,IAAKpB,KAER4I,EAAYjC,uBAAY,SAACrG,GAC7B,MAAM,oCAAN,OAA2CA,EAA3C,aACC,IAEGuI,EAAmBlC,uBAAY,SAACmC,GACpC,OAAIA,EAAM,QAAUA,GAAO,MAClB,SACEA,EAAM,OAASA,GAAO,MACxB,eACEA,EAAM,OAASA,GAAO,OACxB,SACEA,EAAM,QAAUA,GAAO,OACzB,eACEA,EAAM,QAAUA,GAAO,OACzB,SACEA,EAAM,QAAUA,GAAO,OACzB,eACEA,EAAM,QAAUA,GAAO,OACzB,SACEA,EAAM,QAAUA,GAAO,OACzB,oBADF,IAGN,IACGC,EAAQ,CACZ,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEF,OACE,cAACxI,EAAA,EAAD,UACE,eAACA,EAAA,EAAKE,KAAN,CAAW/C,UAAWC,KAAOyG,QAA7B,UACE,sBAAK1G,UAAWC,KAAOqL,aAAvB,UACE,cAACzI,EAAA,EAAKQ,MAAN,CAAYrD,UAAS,UAAKC,KAAO8B,KAAZ,YAAoB9B,KAAOsL,YAAhD,SACG/I,IAEH,sBAAKxC,UAAWC,KAAOuL,OAAvB,UACE,qBACExL,UAAS,UAAKC,KAAOwL,YAAZ,YAA2BxL,KAAOyL,gBAE7C,qBAAK1L,UAAWC,KAAOwL,YAAvB,wFACA,qBAAKzL,UAAWC,KAAOwL,YAAvB,uFACA,qBAAKzL,UAAWC,KAAOwL,YAAvB,uGACA,qBAAKzL,UAAWC,KAAOwL,YAAvB,uEACA,qBAAKzL,UAAWC,KAAOwL,YAAvB,4DAGJ,sBAAKzL,UAAWC,KAAO0L,cAAvB,UACE,qBAAK3L,UAAWC,KAAOoB,KAAvB,SACGtB,EAAM2D,IAAI0C,KAAI,SAACqD,EAAMpD,GACpB,IAAMhF,EAAO,IAAIW,KAAsC,KAAhCyH,EAAK3H,GAAKQ,IAC3BsJ,EAAavK,EAAKY,cAAcC,MAAM,GAAI,IAChD,OACE,qBAAKlC,UAAWC,KAAO4L,UAAvB,SACmB,UAAfD,GACe,UAAfA,GACe,UAAfA,GACF,IAAI5J,KAAKX,GAAMkC,gBAAkBf,EAASN,MAAM,EAAG,GAKjD0J,EAJA,sCAAOA,EAAP,aAAsBvK,EAAKY,cAAcC,MAAM,EAAG,GAAlD,YACEmJ,EAAMhK,EAAKc,gBANsBsH,EAAKpI,WAelD,qBAAKrB,UAAWC,KAAO6L,OAAvB,SACG/L,EAAM2D,IAAI0C,KAAI,SAACqD,GACd,OACE,sBAAKzJ,UAAWC,KAAO8L,cAAvB,UACE,qBAAK/L,UAAWC,KAAO+L,YAAvB,SACE,qBACEtJ,IAAKwI,EAAUzB,EAAK9G,QAAQC,MAC5B2B,IAAKkF,EAAK9G,QAAQsJ,YAClBjM,UAAWC,KAAOiM,gBAClBC,MAAM,MACNC,OAAO,UAGX,qBAAKpM,UAAWC,KAAOoM,YAAvB,SACG5K,EAAQgI,EAAK/H,KAAKA,QAErB,qBAAK1B,UAAWC,KAAOoM,YAAvB,SACG5K,EAAQgI,EAAK/H,KAAKoC,cAErB,qBAAK9D,UAAWC,KAAOoM,YAAvB,SACG1K,KAAKC,MAA2B,iBAArB6H,EAAK/H,KAAK0C,YAExB,qBAAKpE,UAAWC,KAAOoM,YAAvB,SAAqC5C,EAAK/H,KAAKyC,WAC/C,sBAAKnE,UAAWC,KAAOoM,YAAvB,UACG1K,KAAKC,MAAwB,GAAlB6H,EAAK6C,KAAKpI,OAAc,GACpC,sBAAMlE,UAAWC,KAAOsM,YAAxB,SACGpB,EAAiB1B,EAAK6C,KAAKlB,YAvBS3B,EAAKpI,oBC9FnDmL,GAAwB,sBACxBC,GAA8B,6BAC9BC,GAAyB,uBAGzBC,GAA0B,SAAC3H,GAAD,MAAW,CAChDC,KAAMwH,GACNvH,QAASF,IAGE4H,GAAoB,SAACpM,GAAD,MAAe,CAC9CyE,KAAMuH,GACNtH,QAAS1E,IC8FIqM,GA1FW,WACxB,IACMxH,EAAWW,cAEX9E,EAAOqB,YAAYvB,GACnB8L,EAAiBvK,YAAY5B,GAC7BH,EAAW+B,YAAYlC,GACvBsM,EAA0BpK,YAAY1B,GACtCkE,EAAoBxC,YAAY9B,GAEtCwF,qBAAU,WACRZ,EDPiC,SAACnE,GAAD,8CAAU,WAAOmE,GAAP,eAAAC,EAAA,6DAC7CD,EAASsH,IAAwB,IADY,SAEtBpH,MAAM,sDAAD,OAC4BrE,EAD5B,kBAnBd,mCAmBc,kBAE1BsE,MAAK,SAACC,GAAD,OAAYA,EAAOC,UAJmB,OAEvClF,EAFuC,OAM7C6E,EAASuH,GAAkBpM,EAASmF,OACpCN,GAZ8BtE,EAYLP,EAASU,KAAK6L,SAZW,CAClD9H,KAAMyH,GACNxH,QAASnE,KAWTsE,EAASsH,IAAwB,IARY,iCALhB,IAAC5L,IAKe,OAAV,sDCOxBiM,CAAsB9L,MAC9B,CAACmE,EAAUnE,IAEd+E,qBAAU,WACRZ,EAASD,EAAgBlE,MACxB,CAACmE,EAAUnE,IAEd,IAAM+L,EAAexK,mBAAQ,WA4B3B,OA3BwB,SAACyK,GACvB,IAAIC,EAAY,GACZC,EAAsB,GAsB1B,OARAF,EAAKG,SAAQ,SAAC3J,EAAK2C,GACjB,GAAIA,GAAS,EAAG,CACd,IAAMiH,EAfsB,SAAC5J,GAU/B,MATe,CACb5B,GAAI4B,EAAI5B,GACRT,KAAMqC,EAAI6J,OACV7L,KAAMgC,EAAI8J,KACV7K,QAASe,EAAIf,QAAQ,GACrB2J,KAAM5I,EAAI4I,KACVmB,IAAK/J,EAAI+J,KAQMC,CAAwBhK,GACvC0J,EAAoB5F,KAAK8F,OAI7BH,EAAU3F,KAAK4F,GACRD,EAGFQ,CAAgBb,KACtB,CAACA,IAEEc,EAAgBnL,mBAAQ,WAC5B,OAAOjC,EAAS0B,MAAM,EAjDH,KAkDlB,CAAC1B,EAlDiB,IAoDrB,OAAOmM,GAA2B5H,EAChC,cAAC,EAAD,IAEA,sBAAK/E,UAAWC,KAAOkG,aAAvB,UACE,qBAAKnG,UAAWC,KAAO4N,eAAvB,SACGZ,EAAa,GAAG5I,OAAS,EACtB4I,EAAa7G,KAAI,SAAC1C,EAAK2C,GACrB,OAAO,cAAC,GAAD,CAAmB3C,IAAKA,GAAUA,EAAI2C,GAAOvE,OAEtD,OAEN,qBAAK9B,UAAWC,KAAO6N,cAAvB,SACGb,EAAa,GAAG5I,OAAS,EACtBuJ,EAAcxH,KAAI,SAAC1C,GACjB,OACE,cAAC,EAAD,CACEqK,MAAO9N,KAAO+N,WACd1K,MAAO,GACPxB,GAAI4B,EAAI5B,GACRgC,WAAYJ,EAAII,WAChBpC,KAAMgC,EAAIhC,KACV+C,QAASf,EAAIe,QACbG,OAAQlB,EAAIkB,OACZT,SAAUT,EAAIS,SACdD,MAAOR,EAAIQ,MACXE,SAAUV,EAAIU,SACdzB,QAASe,EAAIf,SACRe,EAAI5B,OAIf,WC5EGmM,GAjBc,WAC3B,IAAM5I,EAAWW,cAET9E,EAASuF,cAATvF,KAKR,OAJA+E,qBAAU,WACRZ,EAASpE,EAAQC,MAChB,CAACmE,EAAUnE,IAGZ,qBAAKlB,UAAWC,KAAOyG,QAAvB,SACE,qBAAK1G,UAAU,YAAf,SACE,cAAC,GAAD,S,oBCHOkO,GAbG,WAChB,OACE,qBAAKlO,UAAWC,KAAOyG,QAAvB,SACE,sBAAK1G,UAAU,YAAf,UACE,qBAAKA,UAAWC,KAAOsK,MAAvB,iBACA,qBAAKvK,UAAWC,KAAOkO,QAAvB,yR,oBCMOC,GAVE,WACf,OACE,qBAAKpO,UAAWC,KAAOyG,QAAvB,SACE,qBAAK1G,UAAU,YAAf,SACE,cAAC,GAAD,SC4BOqO,GAzBH,WACV,OACE,eAAC,IAAD,WACE,cAAC,GAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAM,CAAC,IAAK,YAAaC,OAAQ,kBAAM,cAAC,GAAD,OACpD,cAAC,IAAD,CACEF,OAAK,EACLC,KAAK,iBACLC,OAAQ,kBAAM,cAAC,GAAD,OAEhB,cAAC,IAAD,CACEF,OAAK,EACLC,KAAK,uBACLC,OAAQ,kBAAM,cAAC,EAAD,OAEhB,cAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,SAASC,OAAQ,kBAAM,cAAC,GAAD,OAEzC,cAAC,IAAD,CAAUrH,GAAG,cAEf,cAAC,EAAD,QClBSsH,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnJ,MAAK,YAAkD,IAA/CoJ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,iBCLRO,GAAe,CACnBzO,SAAU,GACVE,WAAW,GAuBEwO,GApBY,WAAmC,IAAlC5O,EAAiC,uDAAzB2O,GAAcE,EAAW,uCAC3D,OAAQA,EAAOlK,MACb,KAAKH,EACH,OAAO,6BACFxE,GADL,IAEEE,SAAU2O,EAAOjK,UAGrB,KAAKL,EACH,OAAO,6BACFvE,GADL,IAEEI,UAAWyO,EAAOjK,UAGtB,QACE,OAAO5E,ICpBP2O,GAAe,CACnB/N,KAAM,kCAiBOkO,GAdQ,WAAmC,IAAlC9O,EAAiC,uDAAzB2O,GAAcE,EAAW,uCACvD,OAAQA,EAAOlK,OACRsB,EACI,6BACFjG,GADL,IAEEY,KAAMiO,EAAOjK,UAIR5E,GCTP2O,GAAe,CACnBvO,WAAW,EACXK,eAAgB,GAChBP,SAAU,IA6BG6O,GA1BkB,WAAmC,IAAlC/O,EAAiC,uDAAzB2O,GAAcE,EAAW,uCACjE,OAAQA,EAAOlK,MACb,KAAKuH,GACH,OAAO,6BACFlM,GADL,IAEEE,SAAU2O,EAAOjK,UAGrB,KAAKuH,GACH,OAAO,6BACFnM,GADL,IAEEI,UAAWyO,EAAOjK,UAGtB,KAAKwH,GACH,OAAO,6BACFpM,GADL,IAEES,eAAgBoO,EAAOjK,UAG3B,QACE,OAAO5E,ICjCAgP,GAAwB,sBCE/BL,GAAe,CACnBM,eAAgB,IAiBHC,GAdkB,WAAmC,IAAlClP,EAAiC,uDAAzB2O,GAAcE,EAAW,uCACjE,OAAQA,EAAOlK,OACRqK,GACI,6BACFhP,GADL,IAEEiP,eAAgBJ,EAAOjK,UAIlB5E,GCFEmP,GAPKC,aAAgB,CAClCzO,QAASmO,GACT7O,YAAa2O,GACbtO,kBAAmByO,GACnBM,kBAAmBH,K,SCJNI,GAFDC,aAAYJ,GAAaK,aAAgBC,OCIvDC,IAASxB,OACP,cAAC,IAAMyB,WAAP,UACE,cAAC,IAAD,CAAUL,MAAOA,GAAjB,SACE,cAAC,GAAD,QAGJM,SAASC,eAAe,SAG1B1B,M,kBChBA7O,EAAOC,QAAU,CAAC,QAAU,wBAAwB,KAAO,qBAAqB,KAAO,qBAAqB,MAAQ,sBAAsB,KAAO,qBAAqB,OAAS,uBAAuB,KAAO,qBAAqB,UAAY,0BAA0B,OAAS,uBAAuB,OAAS,uBAAuB,WAAa,2BAA2B,IAAM,uB","file":"static/js/main.476f9498.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Footer_wrapper__2w3jc\",\"link\":\"Footer_link__3V__M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"FavoriteCityButton_btn__3HKAJ\",\"btn_active\":\"FavoriteCityButton_btn_active__1kQt-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper_hourly\":\"HourlyCardWrapper_wrapper_hourly__1MZh8\",\"wrapper_daily\":\"HourlyCardWrapper_wrapper_daily__3KTJJ\",\"daily_card\":\"HourlyCardWrapper_daily_card__7R_4o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ErrorPage_wrapper__2AQhf\",\"title\":\"ErrorPage_title__1aWkN\",\"message\":\"ErrorPage_message__1plkM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"line\":\"Line_line__3eWSE\",\"line_title\":\"Line_line_title__3fBGg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader_wrapper\":\"Loader_loader_wrapper__1RSCu\",\"lds_spinner\":\"Loader_lds_spinner__2wkkt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"DetailsPage_wrapper__3r0Yn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card_wrapper\":\"CardWrapper_card_wrapper__2cfEm\",\"card_wrapper_long\":\"CardWrapper_card_wrapper_long__3tuK_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"MainSearchResultPage_wrapper__-AdkW\",\"nav\":\"MainSearchResultPage_nav__2DAnq\",\"btn\":\"MainSearchResultPage_btn__2V3R1\",\"btn_active\":\"MainSearchResultPage_btn_active__mTLlC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"MainPage_wrapper__3JqEf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"head\":\"WeatherCard_head__TTlQn\",\"card\":\"WeatherCard_card__1zAQy\",\"img\":\"WeatherCard_img__2ySmG\",\"date\":\"WeatherCard_date__3YIGz\",\"indicator_wrapper\":\"WeatherCard_indicator_wrapper__2nTSE\",\"indicator_item\":\"WeatherCard_indicator_item__1KwHn\",\"indicator_num\":\"WeatherCard_indicator_num__2s3Lv\",\"feels_temp\":\"WeatherCard_feels_temp__3nRGi\",\"feels_temp_item\":\"WeatherCard_feels_temp_item__2Oqtd\",\"line\":\"WeatherCard_line__1EOzF\",\"length\":\"WeatherCard_length__2Z1ZX\",\"length_item\":\"WeatherCard_length_item__2BrMb\",\"length_img\":\"WeatherCard_length_img__UVbNq\",\"indicator_wrapper_column\":\"WeatherCard_indicator_wrapper_column__2xq3e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"HourlyWeatherCard_wrapper__1jTOz\",\"wrapper_left\":\"HourlyWeatherCard_wrapper_left__1tY8Y\",\"date\":\"HourlyWeatherCard_date__QpCSf\",\"date_today\":\"HourlyWeatherCard_date_today__27hXw\",\"wrapper_right\":\"HourlyWeatherCard_wrapper_right__398Q-\",\"time\":\"HourlyWeatherCard_time__1bq-h\",\"time_item\":\"HourlyWeatherCard_time_item__2GJRj\",\"content\":\"HourlyWeatherCard_content__3p_K6\",\"titles_empty\":\"HourlyWeatherCard_titles_empty__N8t5c\",\"titles_item\":\"HourlyWeatherCard_titles_item__3QTH3\",\"values\":\"HourlyWeatherCard_values__31-B9\",\"values_column\":\"HourlyWeatherCard_values_column__sHrs6\",\"values_icon\":\"HourlyWeatherCard_values_icon__2mOlt\",\"values_icon_img\":\"HourlyWeatherCard_values_icon_img__2-cBJ\",\"values_item\":\"HourlyWeatherCard_values_item__36JgT\",\"values_wind\":\"HourlyWeatherCard_values_wind__R1qWf\",\"titles\":\"HourlyWeatherCard_titles__2mbIU\"};","import styles from \"./Line.module.css\";\r\n\r\nconst Line = (props) => {\r\n  return (\r\n    <div className={styles.line}>\r\n      <span className={styles.line_title}>{props.child}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Line;\r\n","export const getForecastSelector = (state) => state.getForecast.forecast;\r\nexport const forecastIsLoadingSelector = (state) => state.getForecast.isLoading;\r\nexport const getHourlyForecastSelector = (state) =>\r\n  state.getHourlyForecast.forecast;\r\nexport const hourlyForecastIsLoadingSelector = (state) =>\r\n  state.getHourlyForecast.isLoading;\r\nexport const cityTimezoneOffsetSelector = (state) =>\r\n  state.getHourlyForecast.timezoneOffset;\r\nexport const setCitySelector = (state) => state.setCity.city;\r\nexport const setFavoriteCitiesSelector = (state) =>\r\n  state.setFavoriteCities.favoriteCities;\r\n","import styles from \"./WeatherCard.module.css\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport { useMemo } from \"react\";\r\nimport Line from \"../Line/Line\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { cityTimezoneOffsetSelector } from \"../../store/selectors/selectors\";\r\n\r\nconst TempItem = (props) => {\r\n  return (\r\n    <div className={styles.indicator_item}>\r\n      <div>{props.time}</div>\r\n      <div>{props.func}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst FeelsLikeTemp = (props) => {\r\n  return <div className={styles.feels_temp_item}>{props.func}</div>;\r\n};\r\n\r\nexport const getTemp = (temp) => {\r\n  return Math.round(temp) > 0 ? `+${Math.round(temp)}` : Math.round(temp);\r\n};\r\n\r\nexport const getCardDate = (dt, timezoneOffset) => {\r\n  const date = new Date((dt + timezoneOffset) * 1000);\r\n  const daysOfWeek = [\"вс\", \"пн\", \"вт\", \"ср\", \"чт\", \"пт\", \"сб\"];\r\n  const month = [\r\n    \"янв\",\r\n    \"фев\",\r\n    \"мар\",\r\n    \"апр\",\r\n    \"мая\",\r\n    \"июн\",\r\n    \"июл\",\r\n    \"авг\",\r\n    \"сен\",\r\n    \"окт\",\r\n    \"ноя\",\r\n    \"дек\",\r\n  ];\r\n\r\n  const cardDate = `${date.toUTCString().slice(5, 7)} ${\r\n    month[date.getMonth()]\r\n  }, ${daysOfWeek[date.getDay()]}`;\r\n\r\n  return cardDate;\r\n};\r\n\r\nconst WeatherCard = (props) => {\r\n  const cityTimezoneOffset = useSelector(cityTimezoneOffsetSelector);\r\n\r\n  const date = new Date((props.dt + cityTimezoneOffset) * 1000);\r\n  const cardDate = useMemo(\r\n    () => getCardDate(props.dt, cityTimezoneOffset),\r\n    [props.dt, cityTimezoneOffset]\r\n  );\r\n\r\n  const src = `http://openweathermap.org/img/wn/${props.weather[0].icon}@2x.png`;\r\n\r\n  return (\r\n    <Card className={styles.card}>\r\n      <Card.Body className={styles.body}>\r\n        <div className={styles.head}>\r\n          <Card.Img variant=\"top\" src={src} className={styles.img} />\r\n          <Card.Title className={styles.date}>\r\n            {props.today &&\r\n            date.getUTCDate() ===\r\n              new Date((props.today + cityTimezoneOffset) * 1000).getUTCDate()\r\n              ? `Сегодня, ${cardDate}`\r\n              : cardDate}\r\n          </Card.Title>\r\n        </div>\r\n        <div className={styles.indicator_wrapper}>\r\n          <TempItem time=\"Утро\" func={getTemp(props.temp.morn)} />\r\n          <TempItem time=\"День\" func={getTemp(props.temp.day)} />\r\n          <TempItem time=\"Вечер\" func={getTemp(props.temp.eve)} />\r\n          <TempItem time=\"Ночь\" func={getTemp(props.temp.night)} />\r\n        </div>\r\n\r\n        <Line child=\"Ощущается как\" />\r\n        <div className={styles.feels_temp}>\r\n          <FeelsLikeTemp func={getTemp(props.feels_like.morn)} />\r\n          <FeelsLikeTemp func={getTemp(props.feels_like.day)} />\r\n          <FeelsLikeTemp func={getTemp(props.feels_like.eve)} />\r\n          <FeelsLikeTemp func={getTemp(props.feels_like.night)} />\r\n        </div>\r\n\r\n        <hr className={styles.line}></hr>\r\n\r\n        <div className={styles.indicator}>\r\n          <div\r\n            className={`${styles.indicator_wrapper} ${styles.indicator_wrapper_column}`}\r\n          >\r\n            <div className={styles.indicator_item}>\r\n              <div>Ветер</div>\r\n              <div className={styles.indicator_num}>\r\n                {Math.round(props.speed)} м/с\r\n              </div>\r\n            </div>\r\n            <div className={styles.indicator_item}>\r\n              <div>Влажность</div>\r\n              <div className={styles.indicator_num}>\r\n                {Math.round(props.humidity)} %\r\n              </div>\r\n            </div>\r\n            <div className={styles.indicator_item}>\r\n              <div>Давление</div>\r\n              <div className={styles.indicator_num}>\r\n                {Math.round(props.pressure * 0.750063755419211)} мм рт. ст.\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <hr className={styles.line}></hr>\r\n\r\n        <div className={styles.length}>\r\n          <div className={styles.length_item}>\r\n            <img\r\n              src=\"https://img.icons8.com/material-sharp/50/000000/sunrise.png\"\r\n              alt=\"sunrise\"\r\n              className={styles.length_img}\r\n            />\r\n            <div>Восход</div>\r\n            <div>\r\n              {new Date(props.sunrise * 1000).getHours() < 10\r\n                ? `0${new Date(props.sunrise * 1000).getHours()}`\r\n                : new Date(props.sunrise * 1000).getHours()}\r\n              :\r\n              {new Date(props.sunrise * 1000).getMinutes() < 10\r\n                ? `0${new Date(props.sunrise * 1000).getMinutes()}`\r\n                : new Date(props.sunrise * 1000).getMinutes()}\r\n            </div>\r\n          </div>\r\n          <div className={styles.length_item}>\r\n            <img\r\n              src=\"https://img.icons8.com/material-sharp/50/000000/sunset.png\"\r\n              alt=\"sunset\"\r\n              className={styles.length_img}\r\n            />\r\n            <div>Закат</div>\r\n            <div>\r\n              {new Date(props.sunset * 1000).getHours()}:\r\n              {new Date(props.sunset * 1000).getMinutes() < 10\r\n                ? `0${new Date(props.sunset * 1000).getMinutes()}`\r\n                : new Date(props.sunset * 1000).getMinutes()}\r\n              {}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default WeatherCard;\r\n","export const forcastIsLoadingType = \"FORECAST_IS_LOADING\";\r\nexport const setForecastType = \"SET_FORECAST\";\r\nconst API_KEY = \"58b6f7c78582bffab3936dac99c31b25\";\r\n\r\nexport const forecastIsLoading = (bool) => ({\r\n  type: forcastIsLoadingType,\r\n  payload: bool,\r\n});\r\n\r\nexport const setForecast = (forecast) => ({\r\n  type: setForecastType,\r\n  payload: forecast,\r\n});\r\n\r\nexport const getForecastData = (city) => async (dispatch) => {\r\n  dispatch(forecastIsLoading(true));\r\n  const forecast = await fetch(\r\n    `https://api.openweathermap.org/data/2.5/forecast/daily?q=${city}&cnt=10&appid=${API_KEY}&units=metric`\r\n  ).then((result) => result.json());\r\n  dispatch(setForecast(forecast.list));\r\n  dispatch(forecastIsLoading(false));\r\n};\r\n","import styles from \"./Loader.module.css\";\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className={styles.loader_wrapper}>\r\n      <div className={styles.lds_spinner}>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Loader;\r\n","import styles from \"./CardWrapper.module.css\";\r\nimport WeatherCard from \"../WeatherCard/WeatherCard\";\r\nimport { useEffect, useMemo } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  getForecastSelector,\r\n  setCitySelector,\r\n  forecastIsLoadingSelector,\r\n} from \"../../store/selectors/selectors\";\r\nimport { getForecastData } from \"../../store/getForecast/getForecastActions\";\r\nimport Loader from \"../Loader/Loader\";\r\n\r\nconst CardWrapper = () => {\r\n  const numberOfDays = 10;\r\n  const forecast = useSelector(getForecastSelector);\r\n  const forecastIsLoading = useSelector(forecastIsLoadingSelector);\r\n  const dispatch = useDispatch();\r\n\r\n  const city = useSelector(setCitySelector);\r\n\r\n  useEffect(() => {\r\n    dispatch(getForecastData(city));\r\n  }, [dispatch, city]);\r\n\r\n  const slicedForecast = useMemo(() => {\r\n    return forecast.slice(0, numberOfDays);\r\n  }, [forecast, numberOfDays]);\r\n\r\n  return forecastIsLoading ? (\r\n    <Loader />\r\n  ) : (\r\n    <div className={styles.card_wrapper}>\r\n      {slicedForecast.map((day, index, array) => {\r\n        return (\r\n          <WeatherCard\r\n            today={array[0].dt}\r\n            dt={day.dt}\r\n            feels_like={day.feels_like}\r\n            temp={day.temp}\r\n            sunrise={day.sunrise}\r\n            sunset={day.sunset}\r\n            humidity={day.humidity}\r\n            speed={day.speed}\r\n            pressure={day.pressure}\r\n            weather={day.weather}\r\n            key={day.dt}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardWrapper;\r\n","export const setCityType = \"SET_CITY\";\r\n\r\nexport const setCity = (city) => ({\r\n  type: setCityType,\r\n  payload: city,\r\n});\r\n","import styles from \"./DetailsPage.module.css\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport CardWrapper from \"../CardWrapper/CardWrapper\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport { setCity } from \"../../store/setCity/setCityActions\";\r\n\r\nconst DetailsPage = () => {\r\n  const { city } = useParams();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => dispatch(setCity(city)), [dispatch, city]);\r\n\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      <div className=\"container\">\r\n        <CardWrapper />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DetailsPage;\r\n","import styles from \"./Footer.module.css\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer className={styles.wrapper}>\r\n      <div className=\"container\">\r\n        <div className={styles.icons}>\r\n          Иконки:{\" \"}\r\n          <a className={styles.link} href=\"https://icons8.com/icon/648/солнце\">\r\n            Солнце icon by Icons8\r\n          </a>\r\n          ,\r\n          <a\r\n            className={styles.link}\r\n            href=\"https://icons8.com/icon/103406/восход\"\r\n          >\r\n            Восход icon by Icons8\r\n          </a>\r\n          ,\r\n          <a\r\n            className={styles.link}\r\n            href=\"https://icons8.com/icon/103398/закат-солнца\"\r\n          >\r\n            Закат солнца icon by Icons8\r\n          </a>\r\n          <a\r\n            className={styles.link}\r\n            href=\"https://icons8.com/icon/tAfqdu2AVpjT/звезда\"\r\n          >\r\n            Звезда icon by Icons8\r\n          </a>\r\n          <a\r\n            className={styles.link}\r\n            href=\"https://icons8.com/icon/8ggStxqyboK5/звезда\"\r\n          >\r\n            Звезда icon by Icons8\r\n          </a>\r\n        </div>\r\n        <div>\r\n          <a\r\n            className={styles.link}\r\n            href=\"https://www.linkedin.com/in/darya-aniskevich/\"\r\n          >\r\n            Darya Aniskevich\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import styles from \"./FavoriteCityButton.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { setCitySelector } from \"../../store/selectors/selectors\";\r\n\r\nconst FavoriteCityButton = (props) => {\r\n  const cityStore = useSelector(setCitySelector);\r\n\r\n  return (\r\n    <NavLink\r\n      activeClassName={styles.btn_active}\r\n      to={\r\n        props.pathname.includes(\"/current\")\r\n          ? `/current/${props.city}`\r\n          : `/long-forecast/${props.city}`\r\n      }\r\n      className={\r\n        props.city === cityStore\r\n          ? `${styles.btn} ${styles.btn_active}`\r\n          : styles.btn\r\n      }\r\n    >\r\n      {props.city}\r\n    </NavLink>\r\n  );\r\n};\r\n\r\nexport default FavoriteCityButton;\r\n","import { NavLink, useHistory, useLocation } from \"react-router-dom\";\r\nimport { FormControl, Button } from \"react-bootstrap\";\r\nimport styles from \"./Header.module.css\";\r\nimport { setCitySelector } from \"../../store/selectors/selectors\";\r\nimport { useState, useMemo, useCallback } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { setCity } from \"../../store/setCity/setCityActions\";\r\nimport FavoriteCityButton from \"../FavoriteCityButton/FavoriteCityButton\";\r\n\r\nconst Header = () => {\r\n  const dispatch = useDispatch();\r\n  const { push } = useHistory();\r\n  const location = useLocation();\r\n  const cityStore = useSelector(setCitySelector);\r\n  const [searchValue, setSearchValue] = useState(\"\");\r\n  const [inFavorites, setInFavorits] = useState(false);\r\n  const favoriteCitiesArray = useMemo(() => {\r\n    return JSON.parse(localStorage.getItem(\"favoriteCities\"))\r\n      ? JSON.parse(localStorage.getItem(\"favoriteCities\"))\r\n      : [];\r\n  }, []);\r\n  const [changedFavorites, setChangedFavorites] = useState(favoriteCitiesArray);\r\n\r\n  const upperCaseCity = (city, separator) => {\r\n    return city\r\n      .split(separator)\r\n      .map((word) => word[0].toUpperCase() + word.substring(1))\r\n      .join(separator);\r\n  };\r\n\r\n  const cityName = useMemo(() => {\r\n    if (cityStore.includes(\" \")) {\r\n      return upperCaseCity(cityStore, \" \");\r\n    } else if (cityStore.includes(\"-\")) {\r\n      return upperCaseCity(cityStore, \"-\");\r\n    } else {\r\n      return cityStore[0].toUpperCase() + cityStore.slice(1);\r\n    }\r\n  }, [cityStore]);\r\n\r\n  const search = useCallback(\r\n    (e, value) => {\r\n      e.preventDefault();\r\n      if (value.trim() === \"\") {\r\n        setSearchValue(\"\");\r\n        return;\r\n      }\r\n      if (location.pathname.includes(\"/current\")) {\r\n        push(`/current/${value}`);\r\n      } else if (location.pathname.includes(\"/long-forecast\")) {\r\n        push(`/long-forecast/${value}`);\r\n      }\r\n\r\n      dispatch(setCity(value));\r\n      setSearchValue(\"\");\r\n    },\r\n    [dispatch, location, push]\r\n  );\r\n\r\n  useMemo(() => {\r\n    favoriteCitiesArray.includes(cityName)\r\n      ? setInFavorits(true)\r\n      : setInFavorits(false);\r\n  }, [cityName, favoriteCitiesArray]);\r\n\r\n  const addToFavoriteCities = useCallback(\r\n    (city) => {\r\n      if (favoriteCitiesArray.includes(city)) {\r\n        setInFavorits(false);\r\n        const cityIndex = favoriteCitiesArray.indexOf(city);\r\n\r\n        favoriteCitiesArray.map((item, index) =>\r\n          cityIndex === index ? favoriteCitiesArray.splice(index, 1) : null\r\n        );\r\n\r\n        localStorage.removeItem(\"favoriteCities\");\r\n        localStorage.setItem(\r\n          \"favoriteCities\",\r\n          JSON.stringify(favoriteCitiesArray)\r\n        );\r\n\r\n        setChangedFavorites(favoriteCitiesArray);\r\n      } else if (!favoriteCitiesArray.includes(city)) {\r\n        setInFavorits(true);\r\n\r\n        favoriteCitiesArray.push(city);\r\n        localStorage.setItem(\r\n          \"favoriteCities\",\r\n          JSON.stringify(favoriteCitiesArray)\r\n        );\r\n        setChangedFavorites(favoriteCitiesArray);\r\n      }\r\n    },\r\n    [favoriteCitiesArray]\r\n  );\r\n\r\n  return (\r\n    <header className={styles.wrapper}>\r\n      <div className=\"container\">\r\n        <div className={styles.flex}>\r\n          <nav className={styles.links}>\r\n            <NavLink\r\n              className={styles.link}\r\n              activeClassName={styles.active}\r\n              to={\"/current\"}\r\n            >\r\n              <img\r\n                className={styles.logo}\r\n                src=\"https://img.icons8.com/ios/50/000000/sun--v1.png\"\r\n                alt=\"Logo\"\r\n              />\r\n            </NavLink>\r\n            <NavLink\r\n              className={styles.link}\r\n              activeClassName={styles.active}\r\n              to={`/current/${cityStore}`}\r\n            >\r\n              Главная\r\n            </NavLink>\r\n            <NavLink\r\n              className={styles.link}\r\n              activeClassName={styles.active}\r\n              to={`/long-forecast/${cityStore}`}\r\n            >\r\n              Прогноз на 10 дней\r\n            </NavLink>\r\n            <div className={styles.text}>\r\n              <b className={styles.text_city}>{cityName}</b>\r\n              <button\r\n                className={styles.button}\r\n                onClick={() => addToFavoriteCities(cityName)}\r\n              >\r\n                <img\r\n                  className={styles.button_img}\r\n                  alt=\"Добавить в избранные\"\r\n                  title=\"Добавить в избранные\"\r\n                  src={\r\n                    inFavorites\r\n                      ? \"https://img.icons8.com/fluency/48/000000/star.png\"\r\n                      : \"https://img.icons8.com/fluency-systems-regular/48/000000/star--v1.png\"\r\n                  }\r\n                />\r\n              </button>\r\n            </div>\r\n          </nav>\r\n          <form\r\n            className={`mb-3 ${styles.search}`}\r\n            onSubmit={(e) => search(e, searchValue)}\r\n          >\r\n            <FormControl\r\n              placeholder=\"Введите город\"\r\n              aria-label=\"city\"\r\n              aria-describedby=\"basic-addon1\"\r\n              value={searchValue}\r\n              type=\"search\"\r\n              onChange={(event) => setSearchValue(event.target.value)}\r\n            />\r\n\r\n            <Button\r\n              variant=\"outline-secondary\"\r\n              id=\"button-addon1\"\r\n              type=\"submit\"\r\n            >\r\n              Искать\r\n            </Button>\r\n          </form>\r\n        </div>\r\n        <div className={styles.buttons}>\r\n          {changedFavorites.map((item) => {\r\n            return (\r\n              <FavoriteCityButton\r\n                key={item}\r\n                pathname={location.pathname}\r\n                city={item}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import styles from \"./HourlyWeatherCard.module.css\";\r\nimport { getTemp, getCardDate } from \"../WeatherCard/WeatherCard\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport { useMemo, useCallback } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { cityTimezoneOffsetSelector } from \"../../store/selectors/selectors\";\r\n\r\nconst HourlyWeatherCard = (props) => {\r\n  const cityTimezoneOffset = useSelector(cityTimezoneOffsetSelector);\r\n\r\n  const date = new Date((props.day[0].dt + cityTimezoneOffset) * 1000);\r\n  const cardDate = useMemo(\r\n    () => getCardDate(props.day[0].dt, cityTimezoneOffset),\r\n    [props.day, cityTimezoneOffset]\r\n  );\r\n  const createSrc = useCallback((icon) => {\r\n    return `http://openweathermap.org/img/wn/${icon}@2x.png`;\r\n  }, []);\r\n\r\n  const getWindDirection = useCallback((deg) => {\r\n    if (deg > 348.75 || deg <= 11.25) {\r\n      return \"С\";\r\n    } else if (deg > 11.25 && deg <= 78.75) {\r\n      return \"СВ\";\r\n    } else if (deg > 78.75 && deg <= 101.25) {\r\n      return \"В\";\r\n    } else if (deg > 101.25 && deg <= 168.75) {\r\n      return \"ЮВ\";\r\n    } else if (deg > 168.75 && deg <= 191.25) {\r\n      return \"Ю\";\r\n    } else if (deg > 191.25 && deg <= 258.75) {\r\n      return \"ЮЗ\";\r\n    } else if (deg > 258.75 && deg <= 281.25) {\r\n      return \"З\";\r\n    } else if (deg > 281.25 && deg <= 384.75) {\r\n      return \"СЗ\";\r\n    }\r\n  }, []);\r\n  const month = [\r\n    \"01\",\r\n    \"02\",\r\n    \"03\",\r\n    \"04\",\r\n    \"05\",\r\n    \"06\",\r\n    \"07\",\r\n    \"08\",\r\n    \"09\",\r\n    \"10\",\r\n    \"11\",\r\n    \"12\",\r\n  ];\r\n  return (\r\n    <Card>\r\n      <Card.Body className={styles.wrapper}>\r\n        <div className={styles.wrapper_left}>\r\n          <Card.Title className={`${styles.date} ${styles.date_today}`}>\r\n            {cardDate}\r\n          </Card.Title>\r\n          <div className={styles.titles}>\r\n            <div\r\n              className={`${styles.titles_item} ${styles.titles_empty}`}\r\n            ></div>\r\n            <div className={styles.titles_item}>Температура, С</div>\r\n            <div className={styles.titles_item}>Ощущается как</div>\r\n            <div className={styles.titles_item}>Давление, мм.рт.ст.</div>\r\n            <div className={styles.titles_item}>Влажность, %</div>\r\n            <div className={styles.titles_item}>Ветер, м/c</div>\r\n          </div>\r\n        </div>\r\n        <div className={styles.wrapper_right}>\r\n          <div className={styles.time}>\r\n            {props.day.map((item, index) => {\r\n              const time = new Date((item.dt + cityTimezoneOffset) * 1000);\r\n              const slicedTime = time.toUTCString().slice(17, 22);\r\n              return (\r\n                <div className={styles.time_item} key={item.time}>\r\n                  {(slicedTime === \"00:00\" ||\r\n                    slicedTime === \"01:00\" ||\r\n                    slicedTime === \"02:00\") &&\r\n                  new Date(time).getUTCDate() !== +cardDate.slice(0, 2) ? (\r\n                    <b>{`${slicedTime}, ${time.toUTCString().slice(5, 7)}.${\r\n                      month[time.getMonth()]\r\n                    }`}</b>\r\n                  ) : (\r\n                    slicedTime\r\n                  )}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          <div className={styles.values}>\r\n            {props.day.map((item) => {\r\n              return (\r\n                <div className={styles.values_column} key={item.time}>\r\n                  <div className={styles.values_icon}>\r\n                    <img\r\n                      src={createSrc(item.weather.icon)}\r\n                      alt={item.weather.description}\r\n                      className={styles.values_icon_img}\r\n                      width=\"100\"\r\n                      height=\"100\"\r\n                    />\r\n                  </div>\r\n                  <div className={styles.values_item}>\r\n                    {getTemp(item.temp.temp)}\r\n                  </div>\r\n                  <div className={styles.values_item}>\r\n                    {getTemp(item.temp.feels_like)}\r\n                  </div>\r\n                  <div className={styles.values_item}>\r\n                    {Math.round(item.temp.pressure * 0.750063755419211)}\r\n                  </div>\r\n                  <div className={styles.values_item}>{item.temp.humidity}</div>\r\n                  <div className={styles.values_item}>\r\n                    {Math.round(item.wind.speed * 10) / 10}\r\n                    <span className={styles.values_wind}>\r\n                      {getWindDirection(item.wind.deg)}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default HourlyWeatherCard;\r\n","export const setHourlyForecastType = \"SET_HOURLY_FORECAST\";\r\nexport const hourlyForecastIsLoadingType = \"HOURLY_FORECAST_IS_LOADING\";\r\nexport const cityTimezoneOffsetType = \"CITY_TIMEZONE_OFFSET\";\r\nconst API_KEY = \"58b6f7c78582bffab3936dac99c31b25\";\r\n\r\nexport const hourlyForecastIsLoading = (bool) => ({\r\n  type: hourlyForecastIsLoadingType,\r\n  payload: bool,\r\n});\r\n\r\nexport const setHourlyForecast = (forecast) => ({\r\n  type: setHourlyForecastType,\r\n  payload: forecast,\r\n});\r\n\r\nexport const setCityTimeZone = (timezoneOffset) => ({\r\n  type: cityTimezoneOffsetType,\r\n  payload: timezoneOffset,\r\n});\r\n\r\nexport const getHourlyForecastDate = (city) => async (dispatch) => {\r\n  dispatch(hourlyForecastIsLoading(true));\r\n  const forecast = await fetch(\r\n    `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${API_KEY}&units=metric`\r\n  ).then((result) => result.json());\r\n\r\n  dispatch(setHourlyForecast(forecast.list));\r\n  dispatch(setCityTimeZone(forecast.city.timezone));\r\n  dispatch(hourlyForecastIsLoading(false));\r\n};\r\n","import styles from \"./HourlyCardWrapper.module.css\";\r\nimport HourlyWeatherCard from \"../HourlyWeatherCard/HourlyWeatherCard\";\r\nimport WeatherCard from \"../WeatherCard/WeatherCard\";\r\nimport { useMemo, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  getHourlyForecastSelector,\r\n  getForecastSelector,\r\n  setCitySelector,\r\n  hourlyForecastIsLoadingSelector,\r\n  forecastIsLoadingSelector,\r\n} from \"../../store/selectors/selectors\";\r\nimport { getHourlyForecastDate } from \"../../store/getHourlyForecast/getHourlyForecastActions\";\r\nimport { getForecastData } from \"../../store/getForecast/getForecastActions\";\r\nimport Loader from \"../Loader/Loader\";\r\n\r\nconst HourlyCardWrapper = () => {\r\n  const numberOfDays = 3;\r\n  const dispatch = useDispatch();\r\n\r\n  const city = useSelector(setCitySelector);\r\n  const hourlyForecast = useSelector(getHourlyForecastSelector);\r\n  const forecast = useSelector(getForecastSelector);\r\n  const hourlyForecastIsLoading = useSelector(hourlyForecastIsLoadingSelector);\r\n  const forecastIsLoading = useSelector(forecastIsLoadingSelector);\r\n\r\n  useEffect(() => {\r\n    dispatch(getHourlyForecastDate(city));\r\n  }, [dispatch, city]);\r\n\r\n  useEffect(() => {\r\n    dispatch(getForecastData(city));\r\n  }, [dispatch, city]);\r\n\r\n  const weatherArray = useMemo(() => {\r\n    const createDaysArray = (data) => {\r\n      let daysArray = [];\r\n      let weatherDataFirstDay = [];\r\n      const createHourlyWeatherData = (day) => {\r\n        const dayObj = {\r\n          dt: day.dt,\r\n          time: day.dt_txt,\r\n          temp: day.main,\r\n          weather: day.weather[0],\r\n          wind: day.wind,\r\n          pop: day.pop,\r\n        };\r\n\r\n        return dayObj;\r\n      };\r\n\r\n      data.forEach((day, index) => {\r\n        if (index <= 7) {\r\n          const dayObj = createHourlyWeatherData(day);\r\n          weatherDataFirstDay.push(dayObj);\r\n        }\r\n      });\r\n\r\n      daysArray.push(weatherDataFirstDay);\r\n      return daysArray;\r\n    };\r\n\r\n    return createDaysArray(hourlyForecast);\r\n  }, [hourlyForecast]);\r\n\r\n  const shortForecast = useMemo(() => {\r\n    return forecast.slice(1, numberOfDays);\r\n  }, [forecast, numberOfDays]);\r\n\r\n  return hourlyForecastIsLoading || forecastIsLoading ? (\r\n    <Loader />\r\n  ) : (\r\n    <div className={styles.card_wrapper}>\r\n      <div className={styles.wrapper_hourly}>\r\n        {weatherArray[0].length > 0\r\n          ? weatherArray.map((day, index) => {\r\n              return <HourlyWeatherCard day={day} key={day[index].dt} />;\r\n            })\r\n          : null}\r\n      </div>\r\n      <div className={styles.wrapper_daily}>\r\n        {weatherArray[0].length > 0\r\n          ? shortForecast.map((day) => {\r\n              return (\r\n                <WeatherCard\r\n                  class={styles.daily_card}\r\n                  today={\"\"}\r\n                  dt={day.dt}\r\n                  feels_like={day.feels_like}\r\n                  temp={day.temp}\r\n                  sunrise={day.sunrise}\r\n                  sunset={day.sunset}\r\n                  humidity={day.humidity}\r\n                  speed={day.speed}\r\n                  pressure={day.pressure}\r\n                  weather={day.weather}\r\n                  key={day.dt}\r\n                />\r\n              );\r\n            })\r\n          : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HourlyCardWrapper;\r\n","import styles from \"./MainSearchResultPage.module.css\";\r\nimport HourlyCardWrapper from \"../HourlyCardWrapper/HourlyCardWrapper\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setCity } from \"../../store/setCity/setCityActions\";\r\nimport { useParams } from \"react-router\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst MainSearchResultPage = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { city } = useParams();\r\n  useEffect(() => {\r\n    dispatch(setCity(city));\r\n  }, [dispatch, city]);\r\n\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      <div className=\"container\">\r\n        <HourlyCardWrapper />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainSearchResultPage;\r\n","import styles from \"./ErrorPage.module.css\";\r\n\r\nconst ErrorPage = () => {\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      <div className=\"container\">\r\n        <div className={styles.title}>404</div>\r\n        <div className={styles.message}>\r\n          Извините, страница, которую вы ищите, не существует\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorPage;\r\n","import styles from \"./MainPage.module.css\";\r\nimport HourlyCardWrapper from \"../HourlyCardWrapper/HourlyCardWrapper\";\r\n\r\nconst MainPage = () => {\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      <div className=\"container\">\r\n        <HourlyCardWrapper />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport DetailsPage from \"./components/DetailsPage/DetailsPage\";\nimport Footer from \"./components/Footer/Footer\";\nimport Header from \"./components/Header/Header\";\nimport MainSearchResultPage from \"./components/MainSearchResultPage/MainSearchResultPage\";\nimport ErrorPage from \"./components/ErrorPage/ErrorPage\";\nimport MainPage from \"./components/MainPage/MainPage\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <Header />\n      <Switch>\n        <Route exact path={[\"/\", \"/current\"]} render={() => <MainPage />} />\n        <Route\n          exact\n          path=\"/current/:city\"\n          render={() => <MainSearchResultPage />}\n        />\n        <Route\n          exact\n          path=\"/long-forecast/:city\"\n          render={() => <DetailsPage />}\n        />\n        <Route exact path=\"/error\" render={() => <ErrorPage />} />\n\n        <Redirect to=\"/error\" />\n      </Switch>\n      <Footer />\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { setForecastType, forcastIsLoadingType } from \"./getForecastActions\";\r\n\r\nconst initialState = {\r\n  forecast: [],\r\n  isLoading: false,\r\n};\r\n\r\nconst getForecastReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case setForecastType: {\r\n      return {\r\n        ...state,\r\n        forecast: action.payload,\r\n      };\r\n    }\r\n    case forcastIsLoadingType: {\r\n      return {\r\n        ...state,\r\n        isLoading: action.payload,\r\n      };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport default getForecastReducer;\r\n","import { setCityType } from \"./setCityActions\";\r\n\r\nconst initialState = {\r\n  city: \"Минск\",\r\n};\r\n\r\nconst setCityReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case setCityType: {\r\n      return {\r\n        ...state,\r\n        city: action.payload,\r\n      };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport default setCityReducer;\r\n","import {\r\n  setHourlyForecastType,\r\n  hourlyForecastIsLoadingType,\r\n  cityTimezoneOffsetType,\r\n} from \"./getHourlyForecastActions\";\r\n\r\nconst initialState = {\r\n  isLoading: false,\r\n  timezoneOffset: \"\",\r\n  forecast: [],\r\n};\r\n\r\nconst getHourlyForecastReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case setHourlyForecastType: {\r\n      return {\r\n        ...state,\r\n        forecast: action.payload,\r\n      };\r\n    }\r\n    case hourlyForecastIsLoadingType: {\r\n      return {\r\n        ...state,\r\n        isLoading: action.payload,\r\n      };\r\n    }\r\n    case cityTimezoneOffsetType: {\r\n      return {\r\n        ...state,\r\n        timezoneOffset: action.payload,\r\n      };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport default getHourlyForecastReducer;\r\n","export const setFavoriteCitiesType = \"SET_FAVORITE_CITIES\";\r\n\r\nexport const setFavoriteCities = (city) => ({\r\n  type: setFavoriteCitiesType,\r\n  payload: city,\r\n});\r\n","import { setFavoriteCitiesType } from \"./setFavoriteCitiesActions\";\r\n\r\nconst initialState = {\r\n  favoriteCities: [],\r\n};\r\n\r\nconst setFavoriteCitiesReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case setFavoriteCitiesType: {\r\n      return {\r\n        ...state,\r\n        favoriteCities: action.payload,\r\n      };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport default setFavoriteCitiesReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport getForecastReducer from \"./getForecast/getForecastReducer\";\r\nimport setCityReducer from \"./setCity/setCityReducer\";\r\nimport getHourlyForecastReducer from \"./getHourlyForecast/getHourlyForecastReducer\";\r\nimport setFavoriteCitiesReducer from \"./setFavoriteCities/setFavoriteCitiesReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  setCity: setCityReducer,\r\n  getForecast: getForecastReducer,\r\n  getHourlyForecast: getHourlyForecastReducer,\r\n  setFavoriteCities: setFavoriteCitiesReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport rootReducer from \"./rootReducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Header_wrapper__sEsCa\",\"flex\":\"Header_flex__1nsh6\",\"logo\":\"Header_logo__at596\",\"links\":\"Header_links__1KbVc\",\"link\":\"Header_link__2wDzI\",\"active\":\"Header_active__ycD2e\",\"text\":\"Header_text__1fijO\",\"text_city\":\"Header_text_city__1qHj3\",\"search\":\"Header_search__2CrGy\",\"button\":\"Header_button__3A-iU\",\"button_img\":\"Header_button_img__2_22-\",\"nav\":\"Header_nav__1lxEM\"};"],"sourceRoot":""}